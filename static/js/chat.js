let currentContact = null;
const emojis = ['üòÄ', 'üòÇ', '‚ù§Ô∏è', 'üòç', 'üò≠', 'üî•', 'üíØ', 'üéâ', 'ü§î', 'üëç', 'üëã', 'üëå', 'üôè', 'üí™', 'üëÄ', 'üôå', 'üëè', 'ü§ù', 'üëç', 'üëé', 'üôè', 'üòä', 'ü•∞', 'üòé', 'ü§©', 'ü•≥', 'üò≠', 'üò°', 'ü§¨', 'ü§Ø', 'ü•∂', 'üò±', 'ü§†', 'ü•¥', 'üòà', 'üëª', 'üëΩ', 'ü§ñ', 'üëæ', 'üëê', 'üôå', 'üëè', 'ü§ù', 'üëç', 'üëé', 'üëä', '‚úä', 'ü§õ', 'ü§ú', 'ü§û', '‚úåÔ∏è', 'ü§ü', 'ü§ò', 'üëå', 'üëà', 'üëâ', 'üëÜ', 'üëá', '‚òùÔ∏è', '‚úã', 'ü§ö', 'üñê', 'üññ', 'üëã', 'ü§ô', 'üí™', 'ü¶æ', 'ü¶ø', 'ü¶µ', 'ü¶∂', 'üëÇ', 'ü¶ª', 'üëÉ', 'üß†', 'ü¶∑', 'ü¶¥', 'üëÄ', 'üëÅ', 'üëÖ', 'üëÑ', 'üë∂', 'üßí', 'üë¶', 'üëß', 'üßë', 'üë±', 'üë®', 'üßî', 'üë®‚Äçü¶∞', 'üë®‚Äçü¶±', 'üë®‚Äçü¶≥', 'üë®‚Äçü¶≤', 'üë©', 'üë©‚Äçü¶∞', 'üë©‚Äçü¶±', 'üë©‚Äçü¶≥', 'üë©‚Äçü¶≤', 'üßì', 'üë¥', 'üëµ', 'üôç', 'üôé', 'üôÖ', 'üôÜ', 'üíÅ', 'üôã', 'üßè', 'üôá', 'ü§¶', 'ü§∑', 'üëÆ', 'üïµ', 'üíÇ', 'ü•∑', 'üë∑', 'ü§¥', 'üë∏', 'üë≥', 'üë≤', 'üßï', 'ü§µ', 'üë∞', 'ü§∞', 'ü§±', 'üëº', 'üéÖ', 'ü§∂', 'ü¶∏', 'ü¶π', 'üßô', 'üßö', 'üßõ', 'üßú', 'üßù', 'üßû', 'üßü', 'üíÜ', 'üíá', 'üö∂', 'üßç', 'üßé', 'üèÉ', 'üíÉ', 'üï∫', 'üï¥', 'üëØ', 'üßñ', 'üßó', 'ü§∫', 'üèá', '‚õ∑', 'üèÇ', 'üèå', 'üèÑ', 'üö£', 'üèä', '‚õπ', 'üèã', 'üö¥', 'üöµ', 'ü§∏', 'ü§º', 'ü§Ω', 'ü§æ', 'ü§π', 'üßò', 'üõÄ', 'üõå', 'üë≠', 'üë´', 'üë¨', 'üíè', 'üíë', 'üë™', 'üó£', 'üë§', 'üë•', 'üë£', 'ü¶∞', 'ü¶±', 'ü¶≥', 'ü¶≤'];

function formatTime(timestamp) {
    const date = new Date(timestamp * 1000);
    const now = new Date();

    // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è
    if (date.toDateString() === now.toDateString()) {
        return date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
    }

    // –ï—Å–ª–∏ –≤—á–µ—Ä–∞
    const yesterday = new Date(now);
    yesterday.setDate(yesterday.getDate() - 1);
    if (date.toDateString() === yesterday.toDateString()) {
        return 'Yesterday ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
    }

    // –ï—Å–ª–∏ —ç—Ç–∞ –Ω–µ–¥–µ–ª—è
    const weekAgo = new Date(now);
    weekAgo.setDate(weekAgo.getDate() - 7);
    if (date > weekAgo) {
        return date.toLocaleDateString([], {weekday: 'short'}) + ' ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
    }

    // –ò–Ω–∞—á–µ –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞
    return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
}

function loadMessages() {
    fetch('/get_messages')
        .then(response => response.json())
        .then(data => {
            const messagesContainer = document.getElementById('messagesContainer');
            messagesContainer.innerHTML = '';

            if (!data.messages || data.messages.length === 0) {
                messagesContainer.innerHTML = '<div class="no-messages">No messages yet</div>';
                return;
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            let filteredMessages = data.messages;
            if (currentContact) {
                filteredMessages = data.messages.filter(msg =>
                    (msg.sender === currentContact && msg.recipient === window.myAddress) ||
                    (msg.sender === window.myAddress && msg.recipient === currentContact)
                );
            }

            filteredMessages.forEach(msg => {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${msg.is_mine ? 'sent' : 'received'}`;

                let content = `<div class="message-content">${msg.content}</div>`;
                if (msg.image && msg.image.startsWith('')) {
                    content += `<img src="${msg.image}" style="max-width: 200px; margin-top: 8px; border-radius: 8px;">`;
                } else if (msg.image) {
                    content += `<img src="${msg.image}" style="max-width: 200px; margin-top: 8px; border-radius: 8px;">`;
                }

                messageDiv.innerHTML = `
                    ${content}
                    <div class="message-meta">
                        ${formatTime(msg.timestamp)}
                    </div>
                `;

                messagesContainer.appendChild(messageDiv);
            });

            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        })
        .catch(error => console.error('Error loading messages:', error));
}

function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const content = messageInput.value.trim();

    if (!content || !currentContact) return;

    fetch('/send_message', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
            recipient: currentContact,
            content: content
        })
    })
    .then(response => response.json())
    .then(data => {
        if (response.ok) {
            messageInput.value = '';
            loadMessages();
        } else {
            alert('Error: ' + data.error);
        }
    })
    .catch(error => console.error('Error sending message:', error));
}

function handleKeyPress(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        sendMessage();
    }
}

function toggleSidebar() {
    const sidebar = document.getElementById('sidebar');
    sidebar.classList.toggle('active');
}

function toggleEmojiPicker() {
    const picker = document.getElementById('emojiPicker');
    if (picker.style.display === 'none' || picker.style.display === '') {
        showEmojiPicker();
        picker.style.display = 'flex';
    } else {
        picker.style.display = 'none';
    }
}

function showEmojiPicker() {
    const picker = document.getElementById('emojiPicker');
    picker.innerHTML = emojis.slice(0, 50).map(emoji =>
        `<button class="emoji-btn" onclick="addEmoji('${emoji}')">${emoji}</button>`
    ).join('');
}

function addEmoji(emoji) {
    const messageInput = document.getElementById('messageInput');
    messageInput.value += emoji;
    messageInput.focus();
}

function handleFileSelect() {
    const fileInput = document.getElementById('fileInput');
    const file = fileInput.files[0];

    if (!file) return;

    const formData = new FormData();
    formData.append('file', file);

    fetch('/upload_file', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (response.ok) {
            const messageInput = document.getElementById('messageInput');
            messageInput.value += '\n[File: ' + data.file_url + ']';
        } else {
            alert('Error uploading file: ' + data.error);
        }
    })
    .catch(error => {
        console.error('Error uploading file:', error);
        alert('Error uploading file');
    });
}

function showMyAddress() {
    alert('Your address:\n\n' + window.myAddress);
}

function showFullAddress() {
    alert('Your full address:\n\n' + window.myAddress);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    window.myAddress = '{{ address }}';

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    loadMessages();

    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    setInterval(loadMessages, 3000);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º emoji picker
    showEmojiPicker();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ localStorage
    const savedContact = localStorage.getItem('selectedContact');
    if (savedContact) {
        currentContact = savedContact;
        document.getElementById('current-contact').textContent = savedContact.substring(0, 20) + '...';
    }
});